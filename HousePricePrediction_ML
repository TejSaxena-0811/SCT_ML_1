import pandas as pd
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.linear_model import LinearRegression, Ridge
from sklearn.preprocessing import StandardScaler, PolynomialFeatures
from sklearn.pipeline import make_pipeline
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns

# Create the dataset
data = pd.read_csv("house_price.csv")

# Define features (X) and target (y)
X = data.drop(["price"], axis = 1)
y = data["price"]

# Data Preprocessing
scaler = StandardScaler()
poly = PolynomialFeatures(degree=2, include_bias=False)

# Create a pipeline for linear regression with polynomial features and scaling
pipeline = make_pipeline(
    scaler,
    poly,
    LinearRegression()
)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model using cross-validation
cross_val_scores = cross_val_score(pipeline, X_train, y_train, cv=5, scoring='r2')
print(f"Cross-validated R^2 Score: {cross_val_scores.mean()}")

# Fit the pipeline to the training data
pipeline.fit(X_train, y_train)

# Make predictions
y_pred = pipeline.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse}")
print(f"R^2 Score: {r2}")

# Print model coefficients (for Linear Regression inside the pipeline)
print("Model Coefficients: ", pipeline.named_steps['linearregression'].coef_)
print("Model Intercept: ", pipeline.named_steps['linearregression'].intercept_)

# Plot Residuals
plt.figure(figsize=(12, 6))
residual = y_test - y_pred
plt.scatter(y_test, residual, color='blue', s=50, label='Residuals')  # Residual = Actual Value - Predicted Value
plt.hlines(y=0, xmin=y_test.min(), xmax=y_test.max(), color='red')
plt.xlabel('Actual Price')
plt.ylabel('Residual')
plt.title('Residual Plot')
plt.legend()
plt.show()

# Plot Predicted vs. Actual Prices
plt.figure(figsize=(12, 6))
plt.scatter(y_test, y_pred, color='blue', s=50, label='Predicted vs Actual')
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.title('Predicted vs Actual Prices')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color='red', linestyle='--')
plt.legend()
plt.show()
